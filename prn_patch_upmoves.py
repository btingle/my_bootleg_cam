import sys, os

# a fairly safe program to run that cleans up files generated by SRP player
# will remove any moves that just move the cutter up and down on the same position
# good for optimizing certain toolpaths, especially finish contour toolpaths

infile_name = sys.argv[1]
outfile_name = sys.argv[2]

infile = open(infile_name, 'r')
outfile = open(outfile_name, 'w')
lastline = None

upmoves_blasted = 0

while True:

	line = infile.readline()
	if not line:
		break

	if line.startswith('V50.0') and lastline:
	
		zpart = line.split(';')[1]
		xypart = ','.join(zpart.split(',')[:2])

		zpart_last = lastline.split(';')[0]
		xypart_last = ','.join(zpart_last.split(',')[:2])

		# this is a rapid up move- need to determine if we are switching to a new tool path, or just a lower portion of the same toolpath
		if xypart == xypart_last:

			zpart_next = infile.readline()
			xypart_next = ','.join(zpart_next.split(',')[:2])

			# modify & leverage dist according to your Personal Risk Tolerance
			def closeenough(xy1, xy2, dist=1):
				if not xy1.startswith('Z') or not xy2.startswith('Z'):
					return False
				x1 = int(xy1[1:].split(',')[0])
				x2 = int(xy2[1:].split(',')[0])
				y1 = int(xy1.split(',')[1])
				y2 = int(xy2.split(',')[1])
				return abs(x1-x2) <= dist and abs(y1-y2) <= dist

			# yup, we're just going to a lower portion of the same toolpath
			if closeenough(xypart, xypart_next, dist=600):

				# skip tokens until we reach the next velocity change command, which usually delineates when the tool is actually going down
				line = infile.readline()
				while line and not line.startswith('V'):
					line = infile.readline()

				upmoves_blasted += 1

				outfile.write(line)

			else:

				outfile.write(line)
				outfile.write(zpart_next)

		else:

			outfile.write(line)

	else:
		outfile.write(line)

	lastline = line

print('removed', upmoves_blasted, 'upmoves')
		